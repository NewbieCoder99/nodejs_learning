'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _adapter = require('./adapter');

var _adapter2 = _interopRequireDefault(_adapter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Builder = function () {
  function Builder(options) {
    _classCallCheck(this, Builder);

    this.options = options;
  }

  _createClass(Builder, [{
    key: 'limit',
    value: function limit(_limit) {
      this.options.limit = _limit;
      return this;
    }
  }, {
    key: 'select',
    value: function select() {
      for (var _len = arguments.length, _select = Array(_len), _key = 0; _key < _len; _key++) {
        _select[_key] = arguments[_key];
      }

      this.options.select = _select;
      return this;
    }
  }, {
    key: 'where',
    value: function where(_where) {
      this.options.where = _where;
      return this;
    }
  }, {
    key: 'limit',
    value: function limit(_limit2) {
      this.options.limit = _limit2;
      return this;
    }
  }, {
    key: 'first',
    value: function first() {
      this.options.limit = 1;
      return this.get();
    }
  }, {
    key: 'get',
    value: function get() {
      return _adapter2.default.select(this.options);
    }
  }]);

  return Builder;
}();

exports.default = Builder;