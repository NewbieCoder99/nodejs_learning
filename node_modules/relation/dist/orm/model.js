'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _adapters = require('./adapters');

var _adapters2 = _interopRequireDefault(_adapters);

var _getName = require('../global/get-name');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

if (!_adapters2.default) throw new Error('You must specify process.env.DB_DRIVER before creating a model.');

var Model = function () {
  function Model(values) {
    _classCallCheck(this, Model);

    this.values = values;
  }

  _createClass(Model, [{
    key: 'with',
    value: function _with() {
      var _this = this;

      for (var _len = arguments.length, relationships = Array(_len), _key = 0; _key < _len; _key++) {
        relationships[_key] = arguments[_key];
      }

      var joins = relationships.map(function (relationship) {
        return _this[relationship]();
      });
      return _adapters2.default.queryBuilder({ joins: joins, model: this.constructor });
    }
  }, {
    key: 'hasOne',
    value: function hasOne(Model) {
      var _this2 = this;

      var localField = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _getName.getFieldName)(Model.name);
      var remoteField = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'id';

      return {
        result: function result() {
          return Model.where(_defineProperty({}, remoteField, _this2.values[localField])).first();
        },
        includeTable: (0, _getName.getTableName)(Model.name),
        localField: (0, _getName.getTableName)(this.constructor.name) + '.' + localField,
        remoteField: (0, _getName.getTableName)(Model.name) + '.' + remoteField
      };
    }
  }, {
    key: 'hasMany',
    value: function hasMany(Model) {
      var _this3 = this;

      var localField = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';
      var remoteField = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (0, _getName.getFieldName)(this.constructor.name);

      return {
        result: function result() {
          return Model.where(_defineProperty({}, remoteField, _this3.values[localField]));
        },
        includeTable: (0, _getName.getTableName)(Model.name),
        localField: (0, _getName.getTableName)(this.constructor.name) + '.' + localField,
        remoteField: (0, _getName.getTableName)(Model.name) + '.' + remoteField
      };
    }
  }], [{
    key: 'tableName',
    value: function tableName() {
      return (0, _getName.getTableName)(this.name);
    }
  }, {
    key: 'all',
    value: function all() {
      return _adapters2.default.select({ model: this });
    }
  }, {
    key: 'first',
    value: function first() {
      return _adapters2.default.select({ limit: 1, model: this });
    }
  }, {
    key: 'create',
    value: function create(data) {
      return _adapters2.default.create({ data: data, model: this });
    }
  }, {
    key: 'select',
    value: function select() {
      for (var _len2 = arguments.length, _select = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        _select[_key2] = arguments[_key2];
      }

      return _adapters2.default.queryBuilder({ select: _select, model: this });
    }
  }, {
    key: 'where',
    value: function where(_where) {
      return _adapters2.default.queryBuilder({ where: _where, model: this });
    }
  }, {
    key: 'limit',
    value: function limit(_limit) {
      return _adapters2.default.queryBuilder({ limit: _limit, model: this });
    }
  }]);

  return Model;
}();

exports.default = Model;