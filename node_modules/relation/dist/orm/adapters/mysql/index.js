'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _connection = require('./connection');

var _connection2 = _interopRequireDefault(_connection);

var _builder = require('./builder');

var _builder2 = _interopRequireDefault(_builder);

var _getName = require('../../../global/get-name');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MysqlAdapter = function () {
  function MysqlAdapter() {
    _classCallCheck(this, MysqlAdapter);
  }

  _createClass(MysqlAdapter, [{
    key: 'select',
    value: function select(_ref) {
      var _this = this;

      var model = _ref.model,
          _select = _ref.select,
          where = _ref.where,
          limit = _ref.limit,
          _ref$joins = _ref.joins,
          joins = _ref$joins === undefined ? [] : _ref$joins;

      return new Promise(function (resolve, reject) {
        var options = {
          sql: 'SELECT ' + (_select ? _select : '*') + ' FROM ' + model.tableName() + (where ? ' WHERE ' + _connection2.default.escape(where) : '') + _this.getJoins(joins) + (limit ? ' LIMIT ' + _connection2.default.escape(limit) : ''),
          nestTables: joins.length > 0 ? true : false
        };

        _connection2.default.query(options, function (error, results) {
          if (error) return reject(error);

          if (joins.length > 0) results = _this.mergeInJoins(results);
          resolve(_this.makeRelatable(limit === 1 ? results[0] : results, model));
        });
      });
    }
  }, {
    key: 'create',
    value: function create(_ref2) {
      var _this2 = this;

      var model = _ref2.model,
          data = _ref2.data;

      return new Promise(function (resolve, reject) {
        _connection2.default.query('INSERT INTO ' + model.tableName() + ' SET ?', data, function (error, result) {
          if (error) return reject(error);
          resolve(_this2.makeRelatable(_extends({
            id: result.insertId
          }, data), model));
        });
      });
    }
  }, {
    key: 'queryBuilder',
    value: function queryBuilder(options) {
      return new _builder2.default(options);
    }
  }, {
    key: 'getJoins',
    value: function getJoins(joins) {
      return joins.map(function (join) {
        return ' INNER JOIN `' + join.includeTable + '` ON ' + join.localField + ' = ' + join.remoteField;
      });
    }
  }, {
    key: 'makeRelatable',
    value: function makeRelatable(result, model) {
      return new Proxy(result, {
        get: function get(target, name) {
          if (name in target) return target[name];
          if ((0, _getName.getTableName)(name) in target) return target[(0, _getName.getTableName)(name)];

          var instance = new model(result);
          if (name in instance) return instance[name]().result();
        }
      });
    }
  }, {
    key: 'mergeInJoins',
    value: function mergeInJoins(results) {
      return results.map(function (result) {
        var newResult = {};
        Object.keys(result).forEach(function (item, index) {
          if (index === 0) newResult = result[item];else newResult[item] = result[item];
        });
        return newResult;
      });
    }
  }]);

  return MysqlAdapter;
}();

exports.default = new MysqlAdapter();